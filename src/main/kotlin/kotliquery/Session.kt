package kotliquery

import kotliquery.action.ExecuteQueryAction
import kotliquery.action.ListResultQueryAction
import kotliquery.action.NullableResultQueryAction
import kotliquery.action.UpdateQueryAction
import java.sql.PreparedStatement
import java.sql.Statement

data class Session(
        val connection: Connection,
        val returnGeneratedKeys: Boolean = false,
        val autoGeneratedKeys: List<String> = listOf()) : LoanPattern {

    private fun createPreparedStatement(query: Query): PreparedStatement {
        val stmt = if (returnGeneratedKeys) {
            if (connection.driverName == "oracle.jdbc.driver.OracleDriver") {
                connection.underlying.prepareStatement(query.statement, autoGeneratedKeys.toTypedArray())
            } else {
                connection.underlying.prepareStatement(query.statement, Statement.RETURN_GENERATED_KEYS)
            }
        } else {
            connection.underlying.prepareStatement(query.statement)
        }
        query.params.withIndex().forEach { param ->
            // TODO: fix
            stmt.setObject(param.index + 1, param.value)
        }
        return stmt
    }

    private fun <A> rows(query: Query, extractor: (Row) -> A?): List<A> {
        return using(createPreparedStatement(query)) { stmt ->
            using(stmt.executeQuery()) { rs ->
                val rows = Row(rs).map { row -> extractor.invoke(row) }
                rows.filter { r -> r != null }.map { r -> r!! }.toList()
            }
        }
    }

    fun <A> single(query: Query, extractor: (Row) -> A?): A? {
        val rs = rows(query, extractor)
        return if (rs.size > 0) rs.first() else null
    }

    fun <A> list(query: Query, extractor: (Row) -> A?): List<A> {
        return rows(query, extractor).toList()
    }

    fun forEach(query: Query, operator: (Row) -> Unit): Unit {
        using(createPreparedStatement(query)) { stmt ->
            using(stmt.executeQuery()) { rs ->
                Row(rs).forEach { row -> operator.invoke(row) }
            }
        }
    }

    fun execute(query: Query): Boolean {
        return using(createPreparedStatement(query)) { stmt ->
            stmt.execute()
        }
    }

    fun update(query: Query): Int {
        return using(createPreparedStatement(query)) { stmt ->
            stmt.executeUpdate()
        }
    }

    fun run(action: ExecuteQueryAction): Boolean {
        return action.runWithSession(this)
    }

    fun run(action: UpdateQueryAction): Int {
        return action.runWithSession(this)
    }

    fun <A> run(action: ListResultQueryAction<A>): List<A> {
        return action.runWithSession(this)
    }

    fun <A> run(action: NullableResultQueryAction<A>): A? {
        return action.runWithSession(this)
    }
}
