apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.github.seratch'
version = '1.3.0'
project.ext {
    artifactId = 'kotliquery'
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    // https://search.maven.org/search?q=g:org.jetbrains.kotlin%20AND%20a:kotlin-gradle-plugin
    ext.kotlin_version = '1.3.21'
    ext.kotlinVersion = ext.kotlin_version
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

configurations {
    provided
    compile.extendsFrom provided
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'org.slf4j:slf4j-api:1.7.26'
    compile 'joda-time:joda-time:2.10.1'
    provided 'com.zaxxer:HikariCP:3.3.1'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile 'com.h2database:h2:1.4.199'
    testCompile 'junit:junit:4.12'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file('build/classes/main/')
    }
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        testLogging.showStandardStreams = true } }

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

try {
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.project {
                name 'kotliquery'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A handy Database access library in Kotlin'
                url 'http://github.com/seratch/kotliquery'
                scm {
                    url 'https://github.com/seratch/kotliquery'
                    connection 'scm:git:git://github.com/seratch/kotliquery.git'
                    developerConnection 'scm:git:git@github.com:seratch/kotliquery.git'
                }
                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id 'seratch'
                        name 'Kazuhio Sera'
                        email 'seratch@gmail.com'
                    }
                }
            }
        }
    }
}
} catch (MissingPropertyException e) { e.printStackTrace() }
